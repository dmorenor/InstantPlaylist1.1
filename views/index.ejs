<!DOCTYPE html>
<html lang="en">
<head>
	<title>Instant Playlist</title>
	<link rel="shortcut icon" href="../images/favicon.ico">
	<meta charset="UTF-8">
	<link href="../stylesheets/instantPlaylist.css" rel="stylesheet" type="text/css">
</head>

<body style="background-color: #191414;">
	<div id="header">
		<a href="localhost:3000"><img src="../images/spotify.png" width="200" height="60"></a>
		<h1>Instant Playlist</h1>
	</div>

	<div id="login">
		<button type="button">Log in to Spotify</button>
	</div>

	<div class="container">
		<div id="searchBox">
		<p><strong>I want a playlist based on: <%= baseArtist %></strong></p>
		<form id="search-form" action="/" method="post">
			<input type="text" id="query" name="name" onfocus="this.value=''" value="Enter artist..." class="form-control"></input>
			<input type="submit" id="search" class="btn btn-primary" value="SEARCH"></input>
		</form>
		</div>


	<div id="playlist">
		<table>
		<% if(playlist !== null) {%>
			<thead>
				<th>Title</th>
				<th>Artist</th>
				<th>Album</th>
				<th></th>
			</thead>

			<tbody>	
				<% var bigList = playlist %>
				<% for (var i = 0; i < bigList.length; i++) {%>
					<% var song = bigList[i] %>
					<% var songInfo = song.replace(/\\['"]+/g, '').split("|") %>
					<tr>
						<td><%= songInfo[0].replace(/['"]+/g, '')%> </td>
						<td><%= songInfo[1].replace(/['"]+/g, '')%> </td>
						<td><%= songInfo[2].replace(/['"]+/g, '')%> </td>
						<% var playUrl = songInfo[3].replace(/['"]+/g, '')%>
						<td><a href="<%= playUrl %>" target="_blank"><button type="button">View in Spotify</button</a></td>
					</tr>
				<% } %>
			</tbody>
			<% } %>
		</table>
	</div>
	
	<script src="https://sdk.scdn.co/spotify-player.js"></script>
		<script> window.onSpotifyWebPlaybackSDKReady = () => {
			const token = <%= token %>;
			const player = new Spotify.Player({
				name: 'Web Playback SDK Quick Start Player',
				getOAuthToken: cb => { cb(token); }
			});

			// Error handling
			player.addListener('initialization_error', ({ message }) => { console.error(message); });
			player.addListener('authentication_error', ({ message }) => { console.error(message); });
			player.addListener('account_error', ({ message }) => { console.error(message); });
			player.addListener('playback_error', ({ message }) => { console.error(message); });

			// Playback status updates
			player.addListener('player_state_changed', state => { console.log(state); });

			// Ready
			player.addListener('ready', ({ device_id }) => {
			console.log('Ready with Device ID', device_id);
			});

			// Connect to the player!
			player.connect();
		};
	  </script>
	</div>
</body>
</html>
